{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * @type {ViewPoint}\n */\n\n\nvar NULL_VIEW_POINT = Object.freeze({\n  x: 0,\n  y: 0,\n  untransformedX: 0,\n  untransformedY: 0\n});\n/**\n * @type {CanvasBounds}\n */\n\nvar NULL_BOUNDS = Object.freeze({\n  canvasWidth: 0,\n  canvasHeight: 0,\n  left: 0,\n  top: 0,\n  right: 0,\n  bottom: 0,\n  viewMin: NULL_VIEW_POINT,\n  viewMax: NULL_VIEW_POINT\n});\n/**\n * The identity matrix (a transform that results in view coordinates that are\n * identical to relative client coordinates).\n * @type {Matrix}\n */\n\nexport var IDENTITY = Object.freeze({\n  a: 1,\n  b: 0,\n  c: 0,\n  d: 1,\n  e: 0,\n  f: 0\n});\n\nfunction valueOrDefault(value, defaultValue) {\n  if (value === null || typeof value === \"undefined\") {\n    return defaultValue;\n  } else {\n    return value;\n  }\n}\n/**\n * Facilitates calculation and manipulation of a zoom-and-pannable view within a\n * canvas.\n */\n\n\nvar CoordinateSystem = /*#__PURE__*/function () {\n  /**\n   * @typedef Extents\n   * @property {number} min the minimal value in the range\n   * @property {number} max the maximal value in the range\n   */\n\n  /**\n   * @typedef Size\n   * @property {number} width the span of the element's horizontal axis\n   * @property {number} height the span of the element's vertical axis\n   */\n\n  /**\n   * @param {Object} parameters the initialization parameters for this instance.\n   * @param {Extents} parameters.scaleExtents the minimum and maximum allowable scale factor.\n   * @param {Sizee} parameters.documentSize the width and height of the document, in client space.\n   */\n  function CoordinateSystem(_ref) {\n    var _this = this;\n\n    var scaleExtents = _ref.scaleExtents,\n        documentSize = _ref.documentSize;\n\n    _defineProperty(this, \"_scaleExtents\", void 0);\n\n    _defineProperty(this, \"_documentSize\", void 0);\n\n    _defineProperty(this, \"_canvas\", null);\n\n    _defineProperty(this, \"_view\", {\n      scale: 1.0,\n      x: 0,\n      y: 0\n    });\n\n    _defineProperty(this, \"_viewChangeListeners\", new Set());\n\n    _defineProperty(this, \"setScale\", function (scale) {\n      _this.setView({\n        scale: scale\n      });\n    });\n\n    _defineProperty(this, \"clampView\", function (_ref2) {\n      var scale = _ref2.scale,\n          x = _ref2.x,\n          y = _ref2.y;\n      var _this$scaleExtents = _this.scaleExtents,\n          min = _this$scaleExtents.min,\n          max = _this$scaleExtents.max;\n      var _this$documentSize = _this.documentSize,\n          width = _this$documentSize.width,\n          height = _this$documentSize.height;\n\n      var _ref3 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref3.left,\n          top = _ref3.top,\n          right = _ref3.right,\n          bottom = _ref3.bottom;\n\n      var canvasWidth = right - left;\n      var canvasHeight = bottom - top;\n      var maxx = canvasWidth / 2;\n      var minx = -(width * _this._view.scale - canvasWidth / 2);\n      var maxy = canvasHeight / 2;\n      var miny = -(height * _this._view.scale - canvasHeight / 2); // Clamp values to acceptible range.\n\n      return {\n        scale: Math.min(Math.max(scale, min), max),\n        x: Math.min(Math.max(x, minx), maxx),\n        y: Math.min(Math.max(y, miny), maxy)\n      };\n    });\n\n    _defineProperty(this, \"resetView\", function () {\n      _this.setView({\n        scale: 1.0,\n        x: 0,\n        y: 0\n      });\n    });\n\n    _defineProperty(this, \"setView\", function (view) {\n      var newView = _this.clampView(_extends({}, _this._view, view || {}));\n\n      var _this$_view = _this._view,\n          scale = _this$_view.scale,\n          x = _this$_view.x,\n          y = _this$_view.y; // Only trigger if the view actually changed.\n\n      if (newView.scale !== scale || newView.x !== x || newView.y !== y) {\n        _this._view = newView;\n\n        _this._viewChangeListeners.forEach(function (listener) {\n          return listener && listener(newView);\n        });\n      }\n\n      return _extends({}, _this._view);\n    });\n\n    _defineProperty(this, \"scaleAtClientPoint\", function (deltaScale, clientPoint) {\n      var viewPt = _this.clientPointToViewPoint(clientPoint);\n\n      var newView = _this.clampView(_extends({}, _this._view, {\n        scale: _this._view.scale + deltaScale\n      }));\n\n      var clientPtPostScale = _this.viewPointToClientPoint(viewPt, newView);\n\n      newView.x = _this._view.x - (clientPtPostScale.clientX - clientPoint.clientX);\n      newView.y = _this._view.y - (clientPtPostScale.clientY - clientPoint.clientY);\n      return _this.setView(newView);\n    });\n\n    _defineProperty(this, \"clientPointToViewPoint\", function (_ref4, view) {\n      var clientX = _ref4.clientX,\n          clientY = _ref4.clientY;\n\n      if (view === void 0) {\n        view = _this._view;\n      }\n\n      var _ref5 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref5.left,\n          top = _ref5.top;\n\n      var relativeClientX = clientX - left;\n      var relativeClientY = clientY - top;\n      return {\n        x: (relativeClientX - view.x) / view.scale,\n        y: (relativeClientY - view.y) / view.scale,\n        relativeClientX: relativeClientX,\n        relativeClientY: relativeClientY\n      };\n    });\n\n    _defineProperty(this, \"viewPointToClientPoint\", function (_ref6, view) {\n      var x = _ref6.x,\n          y = _ref6.y;\n\n      if (view === void 0) {\n        view = _this._view;\n      }\n\n      var _ref7 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref7.left,\n          top = _ref7.top;\n\n      var relativeX = x * view.scale + view.x;\n      var relativeY = y * view.scale + view.y;\n      var clientX = relativeX + left;\n      var clientY = relativeY + top;\n      return {\n        clientX: clientX,\n        clientY: clientY,\n        relativeX: relativeX,\n        relativeY: relativeY,\n        x: clientX,\n        y: clientY\n      };\n    });\n\n    _defineProperty(this, \"attachViewChangeListener\", function (listener) {\n      _this._viewChangeListeners.add(listener);\n    });\n\n    this._scaleExtents = scaleExtents;\n    this._documentSize = documentSize;\n  }\n  /**\n   * @type {Extents}\n   */\n\n\n  _createClass(CoordinateSystem, [{\n    key: \"canvas\",\n\n    /**\n     * @returns {Canvas} the canvas currently associated with this instance.\n     */\n    get: function get() {\n      return this._canvas;\n    }\n    /**\n     * Updates the canvas for this coordinate system and recalculates the view.\n     * @param {Canvas} canvas the new canvas to associate with this instance.\n     */\n    ,\n    set: function set(canvas) {\n      this._canvas = canvas;\n      this.setView();\n    }\n    /**\n     * @returns {number} the current zoom factor\n     */\n\n  }, {\n    key: \"scale\",\n    get: function get() {\n      return this._view.scale;\n    }\n    /**\n     * Sets the zoom factor (clamped by the scale extents) and updates the view.\n     * @param {number} the new zoom factor\n     */\n\n  }, {\n    key: \"x\",\n\n    /**\n     * @returns {number} the horizontal component of the current pan offset\n     */\n    get: function get() {\n      return this._view.x;\n    }\n    /**\n     * Sets the horizontal pan offset (clamped by the document extents) and\n     * updates the view.\n     * @param {number} x the new offset\n     */\n    ,\n    set: function set(x) {\n      this.setView({\n        x: x\n      });\n    }\n    /**\n     * @retruns {number} the vertical component of the current pan offset\n     */\n\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this._view.y;\n    }\n    /**\n     * Sets the vertical pan offset (clamped by the document extents) and\n     * updates the view.\n     * @param {number} y the new offset\n     */\n    ,\n    set: function set(y) {\n      this.setView({\n        y: y\n      });\n    }\n    /**\n     * @returns {View} a copy of this instance's current view state.\n     */\n\n  }, {\n    key: \"view\",\n    get: function get() {\n      return _extends({}, this._view);\n    }\n    /**\n     * @returns {Extents} a copy of the scale extents currently applied to this\n     * instance.\n     */\n\n  }, {\n    key: \"scaleExtents\",\n    get: function get() {\n      return _extends({}, this._scaleExtents);\n    }\n    /**\n     * Updates the minimum and maximum scale and resets the view transform if it\n     * is outside the new extents.\n     * @param {Extents} extents the new scale extents.\n     */\n    ,\n    set: function set(_ref8) {\n      var min = _ref8.min,\n          max = _ref8.max;\n      this._scaleExtents = {\n        min: min,\n        max: max\n      };\n      this.setView();\n    }\n    /**\n     * @returns {Size} the current document size (used to constrain the pan\n     * offset).\n     */\n\n  }, {\n    key: \"documentSize\",\n    get: function get() {\n      return _extends({}, this._documentSize);\n    }\n    /**\n     * Sets the document size and recalculates the view if it is outside the new\n     * bounds.\n     * @param {Size} size the new document size.\n     */\n    ,\n    set: function set(_ref9) {\n      var width = _ref9.width,\n          height = _ref9.height;\n      this._documentSize = {\n        width: width,\n        height: height\n      };\n      this.setView();\n    }\n    /**\n     * A view matrix expressing a series of transformations.\n     * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform\n     * @typedef Matrix\n     * @property {number} a horizontal scaling factor (1 == unscaled)\n     * @property {number} b vertical skewing factor (0 == unskewed)\n     * @property {number} c horizontal skewing factor (0 == unskewed)\n     * @property {number} d vertical scaling factor (1 == unscaled)\n     * @property {number} e horizontal translation (0 == untranslated)\n     * @property {number} f vertical translation (0 == untranslated)\n     */\n\n    /**\n     * @returns {Matrix} this coordinate system's current transformation matrix\n     */\n\n  }, {\n    key: \"transformMatrix\",\n    get: function get() {\n      //\n      return {\n        a: this._view.scale,\n        // horizontal scaling\n        b: 0,\n        // vertical skewing\n        c: 0,\n        // horizontal skewing\n        d: this._view.scale,\n        // vertical scaling\n        e: this._view.x,\n        f: this._view.y\n      };\n    }\n    /**\n     * An object expressing the bounds of a canvas object in terms of the\n     * coordinate system.\n     * @typedef CanvasBounds\n     * @property {number} left the left edge of the canvas in client space\n     * @property {number} right the right edge of the canvas in client space\n     * @property {number} top the top edge of the canvas in client space\n     * @property {number} bottom the bottom edge of the canvas in client space\n     * @property {number} canvasWidth the width of the canvas in client space\n     * @property {number} canvasHeight the height of the canvas in client space\n     * @property {ViewPoint} viewMin the top-left corner of the canvas in view space\n     * @property {ViewPoint} viewMax the bottom-right corner of the canvas in view space\n     */\n\n    /**\n     * @returns {CanvasBounds | undefined} the boundaries of the canvas linked to\n     * this coordinate system, or undefined if no canvas is set.\n     */\n\n  }, {\n    key: \"canvasBounds\",\n    get: function get() {\n      if (this._canvas) {\n        var _this$_canvas$getBoun = this._canvas.getBoundingClientRect(),\n            left = _this$_canvas$getBoun.left,\n            top = _this$_canvas$getBoun.top,\n            right = _this$_canvas$getBoun.right,\n            bottom = _this$_canvas$getBoun.bottom;\n\n        return {\n          viewMin: this.clientPointToViewPoint({\n            clientX: left,\n            clientY: top\n          }),\n          viewMax: this.clientPointToViewPoint({\n            clientX: right,\n            clientY: bottom\n          }),\n          left: left,\n          top: top,\n          right: right,\n          bottom: bottom,\n          canvasWidth: this._canvas.width,\n          canvasHeight: this._canvas.height\n        };\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * @private\n     * @return {{left: number, top: number} | undefined}\n     */\n\n  }, {\n    key: \"canvasRect\",\n    get: function get() {\n      if (this.canvas) {\n        return this.canvas.getBoundingClientRect();\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * Calculates a variant of the given view clamped according to the scale and\n     * document bounds. Does not modify this instance.\n     * @param {View} view the view constraints to clamp.\n     * @returns {View} a new view object representing the constrained input.\n     */\n\n  }]);\n\n  return CoordinateSystem;\n}();\n\nexport { CoordinateSystem as default };","map":{"version":3,"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","_createClass","Constructor","protoProps","staticProps","_defineProperty","obj","value","NULL_VIEW_POINT","freeze","x","y","untransformedX","untransformedY","NULL_BOUNDS","canvasWidth","canvasHeight","left","top","right","bottom","viewMin","viewMax","IDENTITY","a","b","c","d","e","f","valueOrDefault","defaultValue","CoordinateSystem","_ref","_this","scaleExtents","documentSize","scale","Set","setView","_ref2","_this$scaleExtents","min","max","_this$documentSize","width","height","_ref3","canvasRect","maxx","minx","_view","maxy","miny","Math","view","newView","clampView","_this$_view","_viewChangeListeners","forEach","listener","deltaScale","clientPoint","viewPt","clientPointToViewPoint","clientPtPostScale","viewPointToClientPoint","clientX","clientY","_ref4","_ref5","relativeClientX","relativeClientY","_ref6","_ref7","relativeX","relativeY","add","_scaleExtents","_documentSize","get","_canvas","set","canvas","_ref8","_ref9","_this$_canvas$getBoun","getBoundingClientRect","undefined","default"],"sources":["/Users/vladikumpan/draw-guess/node_modules/react-canvas-draw/es/coordinateSystem.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * @type {ViewPoint}\n */\nvar NULL_VIEW_POINT = Object.freeze({\n  x: 0,\n  y: 0,\n  untransformedX: 0,\n  untransformedY: 0\n});\n/**\n * @type {CanvasBounds}\n */\n\nvar NULL_BOUNDS = Object.freeze({\n  canvasWidth: 0,\n  canvasHeight: 0,\n  left: 0,\n  top: 0,\n  right: 0,\n  bottom: 0,\n  viewMin: NULL_VIEW_POINT,\n  viewMax: NULL_VIEW_POINT\n});\n/**\n * The identity matrix (a transform that results in view coordinates that are\n * identical to relative client coordinates).\n * @type {Matrix}\n */\n\nexport var IDENTITY = Object.freeze({\n  a: 1,\n  b: 0,\n  c: 0,\n  d: 1,\n  e: 0,\n  f: 0\n});\n\nfunction valueOrDefault(value, defaultValue) {\n  if (value === null || typeof value === \"undefined\") {\n    return defaultValue;\n  } else {\n    return value;\n  }\n}\n/**\n * Facilitates calculation and manipulation of a zoom-and-pannable view within a\n * canvas.\n */\n\n\nvar CoordinateSystem = /*#__PURE__*/function () {\n  /**\n   * @typedef Extents\n   * @property {number} min the minimal value in the range\n   * @property {number} max the maximal value in the range\n   */\n\n  /**\n   * @typedef Size\n   * @property {number} width the span of the element's horizontal axis\n   * @property {number} height the span of the element's vertical axis\n   */\n\n  /**\n   * @param {Object} parameters the initialization parameters for this instance.\n   * @param {Extents} parameters.scaleExtents the minimum and maximum allowable scale factor.\n   * @param {Sizee} parameters.documentSize the width and height of the document, in client space.\n   */\n  function CoordinateSystem(_ref) {\n    var _this = this;\n\n    var scaleExtents = _ref.scaleExtents,\n        documentSize = _ref.documentSize;\n\n    _defineProperty(this, \"_scaleExtents\", void 0);\n\n    _defineProperty(this, \"_documentSize\", void 0);\n\n    _defineProperty(this, \"_canvas\", null);\n\n    _defineProperty(this, \"_view\", {\n      scale: 1.0,\n      x: 0,\n      y: 0\n    });\n\n    _defineProperty(this, \"_viewChangeListeners\", new Set());\n\n    _defineProperty(this, \"setScale\", function (scale) {\n      _this.setView({\n        scale: scale\n      });\n    });\n\n    _defineProperty(this, \"clampView\", function (_ref2) {\n      var scale = _ref2.scale,\n          x = _ref2.x,\n          y = _ref2.y;\n      var _this$scaleExtents = _this.scaleExtents,\n          min = _this$scaleExtents.min,\n          max = _this$scaleExtents.max;\n      var _this$documentSize = _this.documentSize,\n          width = _this$documentSize.width,\n          height = _this$documentSize.height;\n\n      var _ref3 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref3.left,\n          top = _ref3.top,\n          right = _ref3.right,\n          bottom = _ref3.bottom;\n\n      var canvasWidth = right - left;\n      var canvasHeight = bottom - top;\n      var maxx = canvasWidth / 2;\n      var minx = -(width * _this._view.scale - canvasWidth / 2);\n      var maxy = canvasHeight / 2;\n      var miny = -(height * _this._view.scale - canvasHeight / 2); // Clamp values to acceptible range.\n\n      return {\n        scale: Math.min(Math.max(scale, min), max),\n        x: Math.min(Math.max(x, minx), maxx),\n        y: Math.min(Math.max(y, miny), maxy)\n      };\n    });\n\n    _defineProperty(this, \"resetView\", function () {\n      _this.setView({\n        scale: 1.0,\n        x: 0,\n        y: 0\n      });\n    });\n\n    _defineProperty(this, \"setView\", function (view) {\n      var newView = _this.clampView(_extends({}, _this._view, view || {}));\n\n      var _this$_view = _this._view,\n          scale = _this$_view.scale,\n          x = _this$_view.x,\n          y = _this$_view.y; // Only trigger if the view actually changed.\n\n      if (newView.scale !== scale || newView.x !== x || newView.y !== y) {\n        _this._view = newView;\n\n        _this._viewChangeListeners.forEach(function (listener) {\n          return listener && listener(newView);\n        });\n      }\n\n      return _extends({}, _this._view);\n    });\n\n    _defineProperty(this, \"scaleAtClientPoint\", function (deltaScale, clientPoint) {\n      var viewPt = _this.clientPointToViewPoint(clientPoint);\n\n      var newView = _this.clampView(_extends({}, _this._view, {\n        scale: _this._view.scale + deltaScale\n      }));\n\n      var clientPtPostScale = _this.viewPointToClientPoint(viewPt, newView);\n\n      newView.x = _this._view.x - (clientPtPostScale.clientX - clientPoint.clientX);\n      newView.y = _this._view.y - (clientPtPostScale.clientY - clientPoint.clientY);\n      return _this.setView(newView);\n    });\n\n    _defineProperty(this, \"clientPointToViewPoint\", function (_ref4, view) {\n      var clientX = _ref4.clientX,\n          clientY = _ref4.clientY;\n\n      if (view === void 0) {\n        view = _this._view;\n      }\n\n      var _ref5 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref5.left,\n          top = _ref5.top;\n\n      var relativeClientX = clientX - left;\n      var relativeClientY = clientY - top;\n      return {\n        x: (relativeClientX - view.x) / view.scale,\n        y: (relativeClientY - view.y) / view.scale,\n        relativeClientX: relativeClientX,\n        relativeClientY: relativeClientY\n      };\n    });\n\n    _defineProperty(this, \"viewPointToClientPoint\", function (_ref6, view) {\n      var x = _ref6.x,\n          y = _ref6.y;\n\n      if (view === void 0) {\n        view = _this._view;\n      }\n\n      var _ref7 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref7.left,\n          top = _ref7.top;\n\n      var relativeX = x * view.scale + view.x;\n      var relativeY = y * view.scale + view.y;\n      var clientX = relativeX + left;\n      var clientY = relativeY + top;\n      return {\n        clientX: clientX,\n        clientY: clientY,\n        relativeX: relativeX,\n        relativeY: relativeY,\n        x: clientX,\n        y: clientY\n      };\n    });\n\n    _defineProperty(this, \"attachViewChangeListener\", function (listener) {\n      _this._viewChangeListeners.add(listener);\n    });\n\n    this._scaleExtents = scaleExtents;\n    this._documentSize = documentSize;\n  }\n  /**\n   * @type {Extents}\n   */\n\n\n  _createClass(CoordinateSystem, [{\n    key: \"canvas\",\n\n    /**\n     * @returns {Canvas} the canvas currently associated with this instance.\n     */\n    get: function get() {\n      return this._canvas;\n    }\n    /**\n     * Updates the canvas for this coordinate system and recalculates the view.\n     * @param {Canvas} canvas the new canvas to associate with this instance.\n     */\n    ,\n    set: function set(canvas) {\n      this._canvas = canvas;\n      this.setView();\n    }\n    /**\n     * @returns {number} the current zoom factor\n     */\n\n  }, {\n    key: \"scale\",\n    get: function get() {\n      return this._view.scale;\n    }\n    /**\n     * Sets the zoom factor (clamped by the scale extents) and updates the view.\n     * @param {number} the new zoom factor\n     */\n\n  }, {\n    key: \"x\",\n\n    /**\n     * @returns {number} the horizontal component of the current pan offset\n     */\n    get: function get() {\n      return this._view.x;\n    }\n    /**\n     * Sets the horizontal pan offset (clamped by the document extents) and\n     * updates the view.\n     * @param {number} x the new offset\n     */\n    ,\n    set: function set(x) {\n      this.setView({\n        x: x\n      });\n    }\n    /**\n     * @retruns {number} the vertical component of the current pan offset\n     */\n\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this._view.y;\n    }\n    /**\n     * Sets the vertical pan offset (clamped by the document extents) and\n     * updates the view.\n     * @param {number} y the new offset\n     */\n    ,\n    set: function set(y) {\n      this.setView({\n        y: y\n      });\n    }\n    /**\n     * @returns {View} a copy of this instance's current view state.\n     */\n\n  }, {\n    key: \"view\",\n    get: function get() {\n      return _extends({}, this._view);\n    }\n    /**\n     * @returns {Extents} a copy of the scale extents currently applied to this\n     * instance.\n     */\n\n  }, {\n    key: \"scaleExtents\",\n    get: function get() {\n      return _extends({}, this._scaleExtents);\n    }\n    /**\n     * Updates the minimum and maximum scale and resets the view transform if it\n     * is outside the new extents.\n     * @param {Extents} extents the new scale extents.\n     */\n    ,\n    set: function set(_ref8) {\n      var min = _ref8.min,\n          max = _ref8.max;\n      this._scaleExtents = {\n        min: min,\n        max: max\n      };\n      this.setView();\n    }\n    /**\n     * @returns {Size} the current document size (used to constrain the pan\n     * offset).\n     */\n\n  }, {\n    key: \"documentSize\",\n    get: function get() {\n      return _extends({}, this._documentSize);\n    }\n    /**\n     * Sets the document size and recalculates the view if it is outside the new\n     * bounds.\n     * @param {Size} size the new document size.\n     */\n    ,\n    set: function set(_ref9) {\n      var width = _ref9.width,\n          height = _ref9.height;\n      this._documentSize = {\n        width: width,\n        height: height\n      };\n      this.setView();\n    }\n    /**\n     * A view matrix expressing a series of transformations.\n     * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform\n     * @typedef Matrix\n     * @property {number} a horizontal scaling factor (1 == unscaled)\n     * @property {number} b vertical skewing factor (0 == unskewed)\n     * @property {number} c horizontal skewing factor (0 == unskewed)\n     * @property {number} d vertical scaling factor (1 == unscaled)\n     * @property {number} e horizontal translation (0 == untranslated)\n     * @property {number} f vertical translation (0 == untranslated)\n     */\n\n    /**\n     * @returns {Matrix} this coordinate system's current transformation matrix\n     */\n\n  }, {\n    key: \"transformMatrix\",\n    get: function get() {\n      //\n      return {\n        a: this._view.scale,\n        // horizontal scaling\n        b: 0,\n        // vertical skewing\n        c: 0,\n        // horizontal skewing\n        d: this._view.scale,\n        // vertical scaling\n        e: this._view.x,\n        f: this._view.y\n      };\n    }\n    /**\n     * An object expressing the bounds of a canvas object in terms of the\n     * coordinate system.\n     * @typedef CanvasBounds\n     * @property {number} left the left edge of the canvas in client space\n     * @property {number} right the right edge of the canvas in client space\n     * @property {number} top the top edge of the canvas in client space\n     * @property {number} bottom the bottom edge of the canvas in client space\n     * @property {number} canvasWidth the width of the canvas in client space\n     * @property {number} canvasHeight the height of the canvas in client space\n     * @property {ViewPoint} viewMin the top-left corner of the canvas in view space\n     * @property {ViewPoint} viewMax the bottom-right corner of the canvas in view space\n     */\n\n    /**\n     * @returns {CanvasBounds | undefined} the boundaries of the canvas linked to\n     * this coordinate system, or undefined if no canvas is set.\n     */\n\n  }, {\n    key: \"canvasBounds\",\n    get: function get() {\n      if (this._canvas) {\n        var _this$_canvas$getBoun = this._canvas.getBoundingClientRect(),\n            left = _this$_canvas$getBoun.left,\n            top = _this$_canvas$getBoun.top,\n            right = _this$_canvas$getBoun.right,\n            bottom = _this$_canvas$getBoun.bottom;\n\n        return {\n          viewMin: this.clientPointToViewPoint({\n            clientX: left,\n            clientY: top\n          }),\n          viewMax: this.clientPointToViewPoint({\n            clientX: right,\n            clientY: bottom\n          }),\n          left: left,\n          top: top,\n          right: right,\n          bottom: bottom,\n          canvasWidth: this._canvas.width,\n          canvasHeight: this._canvas.height\n        };\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * @private\n     * @return {{left: number, top: number} | undefined}\n     */\n\n  }, {\n    key: \"canvasRect\",\n    get: function get() {\n      if (this.canvas) {\n        return this.canvas.getBoundingClientRect();\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * Calculates a variant of the given view clamped according to the scale and\n     * document bounds. Does not modify this instance.\n     * @param {View} view the view constraints to clamp.\n     * @returns {View} a new view object representing the constrained input.\n     */\n\n  }]);\n\n  return CoordinateSystem;\n}();\n\nexport { CoordinateSystem as default };"],"mappings":"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"},"metadata":{},"sourceType":"module"}