{"ast":null,"code":"const server = () => {\n  const {\n    createServer\n  } = require(\"http\");\n\n  const {\n    Server\n  } = require(\"socket.io\");\n\n  const httpServer = createServer();\n  const io = new Server(httpServer, {\n    cors: {\n      origin: \"*\"\n    }\n  });\n  let board = null;\n  const players = {\n    red: null,\n    yellow: null\n  };\n  let player = \"red\";\n\n  function reset() {\n    board = Array(6).fill(0).map(x => Array(8).fill(\"white\"));\n    players[\"red\"] = null;\n    players[\"yellow\"] = null;\n    player = \"red\";\n  }\n\n  function checkVictory(i, j) {\n    const c = board[i][j]; // Check horizontally\n\n    let count = 0; // count to the left\n\n    for (let k = 1; k < 4; ++k) {\n      if (j - k < 0) {\n        break;\n      }\n\n      if (board[i][j - k] !== c) {\n        break;\n      }\n\n      count++;\n    } // count to the right\n\n\n    for (let k = 1; k < 4; ++k) {\n      if (j + k > 7) {\n        break;\n      }\n\n      if (board[i][j + k] !== c) {\n        break;\n      }\n\n      count++;\n    }\n\n    if (count > 2) {\n      return true;\n    } // Check vertically\n\n\n    count = 0; // count up\n\n    for (let k = 1; k < 4; ++k) {\n      if (i - k < 0) {\n        break;\n      }\n\n      if (board[i - k][j] !== c) {\n        break;\n      }\n\n      count++;\n    } // count down\n\n\n    for (let k = 1; k < 4; ++k) {\n      if (i + k > 5) {\n        break;\n      }\n\n      if (board[i + k][j] !== c) {\n        break;\n      }\n\n      count++;\n    }\n\n    if (count > 2) {\n      return true;\n    } // Check diagonal top-left -> bottom-right\n\n\n    count = 0; // count to top-left\n\n    for (let k = 1; k < 4; ++k) {\n      if (i - k < 0 || j - k < 0) {\n        break;\n      }\n\n      if (board[i - k][j - k] !== c) {\n        break;\n      }\n\n      count++;\n    } // count to bottom-right\n\n\n    for (let k = 1; k < 4; ++k) {\n      if (i + k > 5 || j + k > 7) {\n        break;\n      }\n\n      if (board[i + k][j + k] !== c) {\n        break;\n      }\n\n      count++;\n    }\n\n    if (count > 2) {\n      return true;\n    } // Check diagonal bottom-left -> top-right\n\n\n    count = 0; // count to bottom-left\n\n    for (let k = 1; k < 4; ++k) {\n      if (i + k > 5 || j - k < 0) {\n        break;\n      }\n\n      if (board[i + k][j - k] !== c) {\n        break;\n      }\n\n      count++;\n    } // count to top-right\n\n\n    for (let k = 1; k < 4; ++k) {\n      if (i - k < 0 || j + k > 7) {\n        break;\n      }\n\n      if (board[i - k][j + k] !== c) {\n        break;\n      }\n\n      count++;\n    }\n\n    return count > 2;\n  }\n\n  io.on(\"connection\", function (socket) {\n    if (players[\"red\"] == null) {\n      players[\"red\"] = socket;\n      socket.emit(\"color\", \"red\");\n    } else if (players[\"yellow\"] == null) {\n      players[\"yellow\"] = socket;\n      socket.emit(\"color\", \"yellow\");\n      io.emit(\"turn\", \"red\");\n    } else {\n      socket.disconnect();\n    }\n\n    socket.on(\"disconnect\", function () {\n      if (players[\"red\"] === socket) {\n        players[\"red\"] = null;\n      } else if (players[\"yellow\"] === socket) {\n        players[\"yellow\"] = null;\n      }\n    });\n    socket.on(\"click\", function (column) {\n      // Ignore players clicking when it's not their turn\n      if (players[player] !== socket) {\n        console.log(\"click from wrong player: \" + player === \"red\" ? \"yellow\" : \"red\");\n        return;\n      } // Ignore clicks on full columns\n\n\n      if (board[0][column] !== \"white\") {\n        console.log(\"click on full column: \" + column);\n        return;\n      } // Ignore clicks before both players are connected\n\n\n      if (players[\"red\"] == null || players[\"yellow\"] == null) {\n        console.log(\"click before all players are connected\");\n        return;\n      } // find first open spot in the column\n\n\n      let row = -1;\n\n      for (row = 5; row >= 0; --row) {\n        if (board[row][column] === \"white\") {\n          board[row][column] = player;\n          break;\n        }\n      }\n\n      io.emit(\"board\", board); // Check victory (only current player can win)\n\n      if (checkVictory(row, column)) {\n        io.emit(\"victory\", player); // Disconnect players\n\n        players[\"red\"].disconnect();\n        players[\"yellow\"].disconnect();\n        reset();\n        return;\n      } // Toggle the player\n\n\n      player = player === \"red\" ? \"yellow\" : \"red\";\n      io.emit(\"turn\", player);\n    });\n  });\n  reset();\n  const port = 1337;\n  httpServer.listen(port);\n  console.log(\"Listening on port \" + port + \"...\");\n};\n\nexport default server;","map":{"version":3,"names":["server","createServer","require","Server","httpServer","io","cors","origin","board","players","red","yellow","player","reset","Array","fill","map","x","checkVictory","i","j","c","count","k","on","socket","emit","disconnect","column","console","log","row","port","listen"],"sources":["/Users/vladikumpan/draw-guess/src/server.js"],"sourcesContent":["\nconst server =()=>{\n\n\n\nconst { createServer } = require(\"http\");\nconst { Server } = require(\"socket.io\");\n\nconst httpServer = createServer();\nconst io = new Server(httpServer, {\n  cors: {\n    origin: \"*\",\n  },\n});\n\nlet board = null;\nconst players = { red: null, yellow: null };\nlet player = \"red\";\n\nfunction reset() {\n  board = Array(6)\n    .fill(0)\n    .map((x) => Array(8).fill(\"white\"));\n  players[\"red\"] = null;\n  players[\"yellow\"] = null;\n  player = \"red\";\n}\n\nfunction checkVictory(i, j) {\n  const c = board[i][j];\n\n  // Check horizontally\n  let count = 0;\n  // count to the left\n  for (let k = 1; k < 4; ++k) {\n    if (j - k < 0) {\n      break;\n    }\n    if (board[i][j - k] !== c) {\n      break;\n    }\n    count++;\n  }\n  // count to the right\n  for (let k = 1; k < 4; ++k) {\n    if (j + k > 7) {\n      break;\n    }\n    if (board[i][j + k] !== c) {\n      break;\n    }\n    count++;\n  }\n\n  if (count > 2) {\n    return true;\n  }\n\n  // Check vertically\n  count = 0;\n  // count up\n  for (let k = 1; k < 4; ++k) {\n    if (i - k < 0) {\n      break;\n    }\n    if (board[i - k][j] !== c) {\n      break;\n    }\n    count++;\n  }\n  // count down\n  for (let k = 1; k < 4; ++k) {\n    if (i + k > 5) {\n      break;\n    }\n    if (board[i + k][j] !== c) {\n      break;\n    }\n    count++;\n  }\n\n  if (count > 2) {\n    return true;\n  }\n\n  // Check diagonal top-left -> bottom-right\n  count = 0;\n  // count to top-left\n  for (let k = 1; k < 4; ++k) {\n    if (i - k < 0 || j - k < 0) {\n      break;\n    }\n    if (board[i - k][j - k] !== c) {\n      break;\n    }\n    count++;\n  }\n  // count to bottom-right\n  for (let k = 1; k < 4; ++k) {\n    if (i + k > 5 || j + k > 7) {\n      break;\n    }\n    if (board[i + k][j + k] !== c) {\n      break;\n    }\n    count++;\n  }\n\n  if (count > 2) {\n    return true;\n  }\n\n  // Check diagonal bottom-left -> top-right\n  count = 0;\n  // count to bottom-left\n  for (let k = 1; k < 4; ++k) {\n    if (i + k > 5 || j - k < 0) {\n      break;\n    }\n    if (board[i + k][j - k] !== c) {\n      break;\n    }\n    count++;\n  }\n  // count to top-right\n  for (let k = 1; k < 4; ++k) {\n    if (i - k < 0 || j + k > 7) {\n      break;\n    }\n    if (board[i - k][j + k] !== c) {\n      break;\n    }\n    count++;\n  }\n\n  return count > 2;\n}\n\nio.on(\"connection\", function (socket) {\n  if (players[\"red\"] == null) {\n    players[\"red\"] = socket;\n    socket.emit(\"color\", \"red\");\n  } else if (players[\"yellow\"] == null) {\n    players[\"yellow\"] = socket;\n    socket.emit(\"color\", \"yellow\");\n    io.emit(\"turn\", \"red\");\n  } else {\n    socket.disconnect();\n  }\n\n  socket.on(\"disconnect\", function () {\n    if (players[\"red\"] === socket) {\n      players[\"red\"] = null;\n    } else if (players[\"yellow\"] === socket) {\n      players[\"yellow\"] = null;\n    }\n  });\n\n  socket.on(\"click\", function (column) {\n    // Ignore players clicking when it's not their turn\n    if (players[player] !== socket) {\n      console.log(\n        \"click from wrong player: \" + player === \"red\" ? \"yellow\" : \"red\"\n      );\n      return;\n    }\n\n    // Ignore clicks on full columns\n    if (board[0][column] !== \"white\") {\n      console.log(\"click on full column: \" + column);\n      return;\n    }\n\n    // Ignore clicks before both players are connected\n    if (players[\"red\"] == null || players[\"yellow\"] == null) {\n      console.log(\"click before all players are connected\");\n      return;\n    }\n\n    // find first open spot in the column\n    let row = -1;\n    for (row = 5; row >= 0; --row) {\n      if (board[row][column] === \"white\") {\n        board[row][column] = player;\n        break;\n      }\n    }\n\n    io.emit(\"board\", board);\n\n    // Check victory (only current player can win)\n    if (checkVictory(row, column)) {\n      io.emit(\"victory\", player);\n      // Disconnect players\n      players[\"red\"].disconnect();\n      players[\"yellow\"].disconnect();\n      reset();\n      return;\n    }\n\n    // Toggle the player\n    player = player === \"red\" ? \"yellow\" : \"red\";\n    io.emit(\"turn\", player);\n  });\n});\n\nreset();\nconst port = 1337;\nhttpServer.listen(port);\nconsole.log(\"Listening on port \" + port + \"...\");\n};\n\nexport default server;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}