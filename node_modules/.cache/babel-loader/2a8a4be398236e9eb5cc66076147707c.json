{"ast":null,"code":"var _jsxFileName = \"/Users/vladikumpan/draw-guess/src/components/Pages/Draw.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport SelectWord from \"./SelectWord\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport axios from \"axios\";\nimport { getGameObject, postConnect } from \"../axios/axiosFunctions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = props => {\n  _s();\n\n  const canvasRef = useRef();\n  const [playerSelection, setPlayerSelection] = useState(\"\");\n  const [isSelected, setIsSelected] = useState(false);\n  const [drawing, setDrawing] = useState();\n  const [isDrawed, setIsDrawed] = useState(false);\n  const navigate = useNavigate();\n\n  const wordSelectedHandler = selectedWord => {\n    setPlayerSelection(selectedWord);\n    setIsSelected(true);\n  };\n\n  const getDrawingHandler = () => {\n    const draw = canvasRef.current.canvasContainer.childNodes[1].toDataURL();\n    setDrawing(draw);\n    setIsDrawed(true);\n    canvasRef.current.clear();\n    props.onPlayerFinishDrawing([draw, playerSelection]);\n  };\n\n  async function sendDrawingHandler() {\n    getDrawingHandler();\n    const gameData = await postConnect();\n    const gameObject = await getGameObject();\n    gameObject.draw = drawing;\n    console.log(gameObject.draw);\n    navigate(`/game?gameId=${gameData.gameId}&role=${gameData.role}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isDrawed && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!isSelected && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SelectWord, {\n          onSelectWord: wordSelectedHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), isSelected && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Please draw \", playerSelection]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n          brushRadius: 2,\n          ref: canvasRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendDrawingHandler,\n          children: \"Submit drawing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), isDrawed && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"please wait for the other player to guess...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"H2ZWSmKItOS02Kp2/aY58pIU0J8=\", true);\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useRef","SelectWord","CanvasDraw","axios","getGameObject","postConnect","Game","props","canvasRef","playerSelection","setPlayerSelection","isSelected","setIsSelected","drawing","setDrawing","isDrawed","setIsDrawed","navigate","useNavigate","wordSelectedHandler","selectedWord","getDrawingHandler","draw","current","canvasContainer","childNodes","toDataURL","clear","onPlayerFinishDrawing","sendDrawingHandler","gameData","gameObject","console","log","gameId","role"],"sources":["/Users/vladikumpan/draw-guess/src/components/Pages/Draw.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport SelectWord from \"./SelectWord\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport axios from \"axios\";\nimport { getGameObject, postConnect} from \"../axios/axiosFunctions\";\n\nconst Game = (props) => {\n  const canvasRef = useRef();\n  const [playerSelection, setPlayerSelection] = useState(\"\");\n  const [isSelected, setIsSelected] = useState(false);\n  const [drawing, setDrawing] = useState();\n  const [isDrawed, setIsDrawed] = useState(false);\n\n  const navigate = useNavigate();\n\n\n  const wordSelectedHandler = (selectedWord) => {\n    setPlayerSelection(selectedWord);\n    setIsSelected(true);\n  };\n\n  const getDrawingHandler = () => {\n    const draw = canvasRef.current.canvasContainer.childNodes[1].toDataURL();\n    setDrawing(draw);\n    setIsDrawed(true);\n    canvasRef.current.clear();\n    props.onPlayerFinishDrawing([draw, playerSelection]);\n  };\n\n  async function sendDrawingHandler() {\n    getDrawingHandler();\n    const gameData = await postConnect();\n    const gameObject = await getGameObject();\n    gameObject.draw = drawing;\n    console.log(gameObject.draw);\n  \n    navigate(`/game?gameId=${gameData.gameId}&role=${gameData.role}`);\n\n  }\n\n  return (\n    <div>\n      {!isDrawed && (\n        <div>\n          {!isSelected && (\n            <div>\n              <SelectWord onSelectWord={wordSelectedHandler} />\n            </div>\n          )}\n          {isSelected && (\n            <div>\n              <h2>Please draw {playerSelection}</h2>\n              <CanvasDraw brushRadius={2} ref={canvasRef} />\n              <button onClick={sendDrawingHandler}>Submit drawing</button>\n            </div>\n          )}\n        </div>\n      )}\n      {isDrawed && (\n        <div>\n          <h2>please wait for the other player to guess...</h2>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA0C,yBAA1C;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;EAAA;;EACtB,MAAMC,SAAS,GAAGR,MAAM,EAAxB;EACA,MAAM,CAACS,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,EAAD,CAAtD;EACA,MAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,EAAtC;EACA,MAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,KAAD,CAAxC;EAEA,MAAMkB,QAAQ,GAAGC,WAAW,EAA5B;;EAGA,MAAMC,mBAAmB,GAAIC,YAAD,IAAkB;IAC5CV,kBAAkB,CAACU,YAAD,CAAlB;IACAR,aAAa,CAAC,IAAD,CAAb;EACD,CAHD;;EAKA,MAAMS,iBAAiB,GAAG,MAAM;IAC9B,MAAMC,IAAI,GAAGd,SAAS,CAACe,OAAV,CAAkBC,eAAlB,CAAkCC,UAAlC,CAA6C,CAA7C,EAAgDC,SAAhD,EAAb;IACAZ,UAAU,CAACQ,IAAD,CAAV;IACAN,WAAW,CAAC,IAAD,CAAX;IACAR,SAAS,CAACe,OAAV,CAAkBI,KAAlB;IACApB,KAAK,CAACqB,qBAAN,CAA4B,CAACN,IAAD,EAAOb,eAAP,CAA5B;EACD,CAND;;EAQA,eAAeoB,kBAAf,GAAoC;IAClCR,iBAAiB;IACjB,MAAMS,QAAQ,GAAG,MAAMzB,WAAW,EAAlC;IACA,MAAM0B,UAAU,GAAG,MAAM3B,aAAa,EAAtC;IACA2B,UAAU,CAACT,IAAX,GAAkBT,OAAlB;IACAmB,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACT,IAAvB;IAEAL,QAAQ,CAAE,gBAAea,QAAQ,CAACI,MAAO,SAAQJ,QAAQ,CAACK,IAAK,EAAvD,CAAR;EAED;;EAED,oBACE;IAAA,WACG,CAACpB,QAAD,iBACC;MAAA,WACG,CAACJ,UAAD,iBACC;QAAA,uBACE,QAAC,UAAD;UAAY,YAAY,EAAEQ;QAA1B;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAFJ,EAMGR,UAAU,iBACT;QAAA,wBACE;UAAA,2BAAiBF,eAAjB;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE,QAAC,UAAD;UAAY,WAAW,EAAE,CAAzB;UAA4B,GAAG,EAAED;QAAjC;UAAA;UAAA;UAAA;QAAA,QAFF,eAGE;UAAQ,OAAO,EAAEqB,kBAAjB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAHF;MAAA;QAAA;QAAA;QAAA;MAAA,QAPJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,EAiBGd,QAAQ,iBACP;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAlBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAyBD,CA3DD;;GAAMT,I;;KAAAA,I;AA6DN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}