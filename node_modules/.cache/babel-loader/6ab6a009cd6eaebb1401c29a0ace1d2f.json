{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.clientPointFromEvent = clientPointFromEvent;\nexports.viewPointFromEvent = viewPointFromEvent;\nexports.SyntheticEvent = exports.DrawingState = exports.TouchScaleState = exports.TouchPanState = exports.ScaleOrPanState = exports.WaitForPinchState = exports.PanState = exports.DisabledState = exports.DefaultState = void 0;\n\nvar _this = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar TOUCH_SLOP = 10;\nvar PINCH_TIMEOUT_MS = 250;\n\nvar SUPPRESS_SCROLL = function SUPPRESS_SCROLL(e) {\n  // No zooming while drawing, but we'll cancel the scroll event.\n  e.preventDefault();\n  return _this;\n};\n/**\n * The default state for the interaction state machine. Supports zoom and\n * initiating pan and drawing actions.\n */\n\n\nvar DefaultState = function DefaultState() {\n  var _this2 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", function (e, canvasDraw) {\n    var _canvasDraw$props = canvasDraw.props,\n        disabled = _canvasDraw$props.disabled,\n        enablePanAndZoom = _canvasDraw$props.enablePanAndZoom,\n        mouseZoomFactor = _canvasDraw$props.mouseZoomFactor;\n\n    if (disabled) {\n      return new DisabledState();\n    } else if (enablePanAndZoom && e.ctrlKey) {\n      e.preventDefault();\n      canvasDraw.coordSystem.scaleAtClientPoint(mouseZoomFactor * e.deltaY, clientPointFromEvent(e));\n    }\n\n    return _this2;\n  });\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return new DisabledState();\n    } else if (e.ctrlKey && canvasDraw.props.enablePanAndZoom) {\n      return new PanState().handleDrawStart(e, canvasDraw);\n    } else {\n      return new WaitForPinchState().handleDrawStart(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return new DisabledState();\n    } else {\n      var _viewPointFromEvent = viewPointFromEvent(canvasDraw.coordSystem, e),\n          x = _viewPointFromEvent.x,\n          y = _viewPointFromEvent.y;\n\n      canvasDraw.lazy.update({\n        x: x,\n        y: y\n      });\n      return _this2;\n    }\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    return canvasDraw.props.disabled ? new DisabledState() : _this2;\n  });\n};\n\nexports.DefaultState = DefaultState;\n;\n/**\n * This state is used as long as the disabled prop is active. It ignores all\n * events and doesn't prevent default actions. The disabled state can only be\n * triggered from the default state (i.e., while no action is actively being\n * performed).\n */\n\nvar DisabledState = function DisabledState() {\n  var _this3 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleMouseWheel(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawStart(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawMove(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawEnd(e, canvasDraw);\n    }\n  });\n};\n/**\n * This state is active as long as the user is panning the image. This state is\n * retained until the pan ceases.\n */\n\n\nexports.DisabledState = DisabledState;\n\nvar PanState = function PanState() {\n  var _this4 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n    _this4.dragStart = clientPointFromEvent(e);\n    _this4.panStart = {\n      x: canvasDraw.coordSystem.x,\n      y: canvasDraw.coordSystem.y\n    };\n    return _this4;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    var _clientPointFromEvent = clientPointFromEvent(e),\n        clientX = _clientPointFromEvent.clientX,\n        clientY = _clientPointFromEvent.clientY;\n\n    var dx = clientX - _this4.dragStart.clientX;\n    var dy = clientY - _this4.dragStart.clientY;\n    canvasDraw.coordSystem.setView({\n      x: _this4.panStart.x + dx,\n      y: _this4.panStart.y + dy\n    });\n    return _this4;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n};\n/**\n * This state is active when the user has initiated the drawing action but has\n * not yet created any lines. We use this state to try and detect a second touch\n * event to initiate a pinch-zoom action. We'll give up on that if enough time\n * or movement happens without a second touch.\n */\n\n\nexports.PanState = PanState;\n\nvar WaitForPinchState = function WaitForPinchState() {\n  var _this5 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    var enablePanAndZoom = canvasDraw.props.enablePanAndZoom;\n    e.preventDefault(); // We're going to transition immediately into lazy-drawing mode if\n    // pan-and-zoom isn't enabled or if this event wasn't triggered by a touch.\n\n    if (!e.touches || !e.touches.length || !enablePanAndZoom) {\n      return new DrawingState().handleDrawStart(e, canvasDraw);\n    } // If we already have two touch events, we can move straight into pinch/pan\n\n\n    if (enablePanAndZoom && e.touches && e.touches.length >= 2) {\n      return new ScaleOrPanState().handleDrawStart(e, canvasDraw);\n    }\n\n    return _this5.handleDrawMove(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault(); // If we have two touches, move to pinch/pan (we don't have to recheck\n    // whether zoom is enabled because that happend in draw start).\n\n    if (e.touches && e.touches.length >= 2) {\n      // Use the start draw to handler to transition.\n      return new ScaleOrPanState().handleDrawStart(e, canvasDraw);\n    }\n\n    var clientPt = clientPointFromEvent(e);\n\n    _this5.deferredPoints.push(clientPt); // If we've already moved far enough, or if enough time has passed, give up\n    // and switch over to drawing.\n\n\n    if (new Date().valueOf() - _this5.startTimestamp < PINCH_TIMEOUT_MS) {\n      if (_this5.startClientPoint === null) {\n        _this5.startClientPoint = clientPt;\n      } // Note that we're using \"manhattan distance\" rather than computing a\n      // hypotenuse here as a cheap approximation\n\n\n      var d = Math.abs(clientPt.clientX - _this5.startClientPoint.clientX) + Math.abs(clientPt.clientY - _this5.startClientPoint.clientY);\n\n      if (d < TOUCH_SLOP) {\n        // We're not ready to give up yet.\n        return _this5;\n      }\n    } // Okay, give up and start drawing.\n\n\n    return _this5.issueDeferredPoints(canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    // The user stopped drawing before we decided what to do. Just treat this as\n    // if they were drawing all along.\n    return _this5.issueDeferredPoints(canvasDraw).handleDrawEnd(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"issueDeferredPoints\", function (canvasDraw) {\n    // Time to give up. Play our deferred points out to the drawing state.\n    // The first point will have been a start draw.\n    var nextState = new DrawingState();\n\n    for (var i = 0; i < _this5.deferredPoints.length; i++) {\n      var deferredPt = _this5.deferredPoints[i];\n      var syntheticEvt = new SyntheticEvent(deferredPt);\n      var func = i === 0 ? nextState.handleDrawStart : nextState.handleDrawMove;\n      nextState = func(syntheticEvt, canvasDraw);\n    }\n\n    return nextState;\n  });\n\n  this.startClientPoint = null;\n  this.startTimestamp = new Date().valueOf();\n  this.deferredPoints = [];\n};\n/**\n * This state is active when the user has added at least two touch points but we\n * don't yet know if they intend to pan or zoom.\n */\n\n\nexports.WaitForPinchState = WaitForPinchState;\n\nvar ScaleOrPanState = function ScaleOrPanState() {\n  var _this6 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    _this6.start = _this6.getTouchMetrics(e);\n    _this6.panStart = {\n      x: canvasDraw.coordSystem.x,\n      y: canvasDraw.coordSystem.y\n    };\n    _this6.scaleStart = canvasDraw.coordSystem.scale;\n    return _this6;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var _this6$recentMetrics = _this6.recentMetrics = _this6.getTouchMetrics(e),\n        centroid = _this6$recentMetrics.centroid,\n        distance = _this6$recentMetrics.distance; // Switch to scaling?\n\n\n    var dd = Math.abs(distance - _this6.start.distance);\n\n    if (dd >= TOUCH_SLOP) {\n      return new TouchScaleState(_this6).handleDrawMove(e, canvasDraw);\n    } // Switch to panning?\n\n\n    var dx = centroid.clientX - _this6.start.centroid.clientX;\n    var dy = centroid.clientY - _this6.start.centroid.clientY;\n    var dc = Math.abs(dx) + Math.abs(dy);\n\n    if (dc >= TOUCH_SLOP) {\n      return new TouchPanState(_this6).handleDrawMove(e, canvasDraw);\n    } // Not enough movement yet\n\n\n    return _this6;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  _defineProperty(this, \"getTouchMetrics\", function (e) {\n    var _clientPointFromEvent2 = clientPointFromEvent(e.touches[0]),\n        t1x = _clientPointFromEvent2.clientX,\n        t1y = _clientPointFromEvent2.clientY;\n\n    var _clientPointFromEvent3 = clientPointFromEvent(e.touches[1]),\n        t2x = _clientPointFromEvent3.clientX,\n        t2y = _clientPointFromEvent3.clientY;\n\n    var dx = t2x - t1x;\n    var dy = t2y - t1y;\n    return {\n      t1: {\n        clientX: t1x,\n        clientY: t1y\n      },\n      t2: {\n        clientX: t2x,\n        clientY: t2y\n      },\n      distance: Math.sqrt(dx * dx + dy * dy),\n      centroid: {\n        clientX: (t1x + t2x) / 2.0,\n        clientY: (t1y + t2y) / 2.0\n      }\n    };\n  });\n};\n/**\n * The user is actively using touch gestures to pan the image.\n */\n\n\nexports.ScaleOrPanState = ScaleOrPanState;\n\nvar TouchPanState = function TouchPanState(scaleOrPanState) {\n  var _this7 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function () {\n    return _this7;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var ref = _this7.scaleOrPanState;\n\n    var _ref$recentMetrics = ref.recentMetrics = ref.getTouchMetrics(e),\n        centroid = _ref$recentMetrics.centroid,\n        distance = _ref$recentMetrics.distance;\n\n    var dx = centroid.clientX - ref.start.centroid.clientX;\n    var dy = centroid.clientY - ref.start.centroid.clientY;\n    canvasDraw.setView({\n      x: ref.panStart.x + dx,\n      y: ref.panStart.y + dy\n    });\n    return _this7;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  this.scaleOrPanState = scaleOrPanState;\n};\n/**\n * The user is actively using touch gestures to scale the drawing.\n */\n\n\nexports.TouchPanState = TouchPanState;\n\nvar TouchScaleState = function TouchScaleState(scaleOrPanState) {\n  var _this8 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function () {\n    return _this8;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var ref = _this8.scaleOrPanState;\n\n    var _ref$recentMetrics2 = ref.recentMetrics = ref.getTouchMetrics(e),\n        centroid = _ref$recentMetrics2.centroid,\n        distance = _ref$recentMetrics2.distance;\n\n    var targetScale = ref.scaleStart * (distance / ref.start.distance);\n    var dScale = targetScale - canvasDraw.coordSystem.scale;\n    canvasDraw.coordSystem.scaleAtClientPoint(dScale, centroid);\n    return _this8;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  this.scaleOrPanState = scaleOrPanState;\n};\n/**\n * This state is active when the user is drawing.\n */\n\n\nexports.TouchScaleState = TouchScaleState;\n\nvar DrawingState = function DrawingState() {\n  var _this9 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (e.touches && e.touches.length) {\n      // on touch, set catenary position to touch pos\n      var _viewPointFromEvent2 = viewPointFromEvent(canvasDraw.coordSystem, e),\n          x = _viewPointFromEvent2.x,\n          y = _viewPointFromEvent2.y;\n\n      canvasDraw.lazy.update({\n        x: x,\n        y: y\n      }, {\n        both: true\n      });\n    }\n\n    return _this9.handleDrawMove(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    var _viewPointFromEvent3 = viewPointFromEvent(canvasDraw.coordSystem, e),\n        x = _viewPointFromEvent3.x,\n        y = _viewPointFromEvent3.y;\n\n    canvasDraw.lazy.update({\n      x: x,\n      y: y\n    });\n    var isDisabled = !canvasDraw.lazy.isEnabled();\n\n    if (!_this9.isDrawing || isDisabled) {\n      // Start drawing and add point\n      canvasDraw.points.push(canvasDraw.clampPointToDocument(canvasDraw.lazy.brush.toObject()));\n      _this9.isDrawing = true;\n    } // Add new point\n\n\n    canvasDraw.points.push(canvasDraw.clampPointToDocument(canvasDraw.lazy.brush.toObject())); // Draw current points\n\n    canvasDraw.drawPoints({\n      points: canvasDraw.points,\n      brushColor: canvasDraw.props.brushColor,\n      brushRadius: canvasDraw.props.brushRadius\n    });\n    return _this9;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    e.preventDefault(); // Draw to this end pos\n\n    _this9.handleDrawMove(e, canvasDraw);\n\n    canvasDraw.saveLine();\n    return new DefaultState();\n  });\n\n  this.isDrawing = false;\n};\n\nexports.DrawingState = DrawingState;\n\nvar SyntheticEvent = function SyntheticEvent(_ref) {\n  var clientX = _ref.clientX,\n      clientY = _ref.clientY;\n\n  _defineProperty(this, \"preventDefault\", function () {});\n\n  this.clientX = clientX;\n  this.clientY = clientY;\n  this.touches = [{\n    clientX: clientX,\n    clientY: clientY\n  }];\n};\n\nexports.SyntheticEvent = SyntheticEvent;\n\nfunction clientPointFromEvent(e) {\n  // use cursor pos as default\n  var clientX = e.clientX;\n  var clientY = e.clientY; // use first touch if available\n\n  if (e.changedTouches && e.changedTouches.length > 0) {\n    clientX = e.changedTouches[0].clientX;\n    clientY = e.changedTouches[0].clientY;\n  }\n\n  return {\n    clientX: clientX,\n    clientY: clientY\n  };\n}\n\nfunction viewPointFromEvent(coordSystem, e) {\n  return coordSystem.clientPointToViewPoint(clientPointFromEvent(e));\n}","map":{"version":3,"names":["exports","__esModule","clientPointFromEvent","viewPointFromEvent","SyntheticEvent","DrawingState","TouchScaleState","TouchPanState","ScaleOrPanState","WaitForPinchState","PanState","DisabledState","DefaultState","_this","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","TOUCH_SLOP","PINCH_TIMEOUT_MS","SUPPRESS_SCROLL","e","preventDefault","_this2","canvasDraw","_canvasDraw$props","props","disabled","enablePanAndZoom","mouseZoomFactor","ctrlKey","coordSystem","scaleAtClientPoint","deltaY","handleDrawStart","_viewPointFromEvent","x","y","lazy","update","_this3","handleMouseWheel","handleDrawMove","handleDrawEnd","_this4","bind","dragStart","panStart","_clientPointFromEvent","clientX","clientY","dx","dy","setView","_this5","touches","length","clientPt","deferredPoints","push","Date","valueOf","startTimestamp","startClientPoint","d","Math","abs","issueDeferredPoints","nextState","i","deferredPt","syntheticEvt","func","_this6","start","getTouchMetrics","scaleStart","scale","_this6$recentMetrics","recentMetrics","centroid","distance","dd","dc","_clientPointFromEvent2","t1x","t1y","_clientPointFromEvent3","t2x","t2y","t1","t2","sqrt","scaleOrPanState","_this7","ref","_ref$recentMetrics","_this8","_ref$recentMetrics2","targetScale","dScale","_this9","_viewPointFromEvent2","both","_viewPointFromEvent3","isDisabled","isEnabled","isDrawing","points","clampPointToDocument","brush","toObject","drawPoints","brushColor","brushRadius","saveLine","_ref","changedTouches","clientPointToViewPoint"],"sources":["/Users/vladikumpan/draw-guess/node_modules/react-canvas-draw/lib/interactionStateMachine.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.clientPointFromEvent = clientPointFromEvent;\nexports.viewPointFromEvent = viewPointFromEvent;\nexports.SyntheticEvent = exports.DrawingState = exports.TouchScaleState = exports.TouchPanState = exports.ScaleOrPanState = exports.WaitForPinchState = exports.PanState = exports.DisabledState = exports.DefaultState = void 0;\n\nvar _this = void 0;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar TOUCH_SLOP = 10;\nvar PINCH_TIMEOUT_MS = 250;\n\nvar SUPPRESS_SCROLL = function SUPPRESS_SCROLL(e) {\n  // No zooming while drawing, but we'll cancel the scroll event.\n  e.preventDefault();\n  return _this;\n};\n/**\n * The default state for the interaction state machine. Supports zoom and\n * initiating pan and drawing actions.\n */\n\n\nvar DefaultState = function DefaultState() {\n  var _this2 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", function (e, canvasDraw) {\n    var _canvasDraw$props = canvasDraw.props,\n        disabled = _canvasDraw$props.disabled,\n        enablePanAndZoom = _canvasDraw$props.enablePanAndZoom,\n        mouseZoomFactor = _canvasDraw$props.mouseZoomFactor;\n\n    if (disabled) {\n      return new DisabledState();\n    } else if (enablePanAndZoom && e.ctrlKey) {\n      e.preventDefault();\n      canvasDraw.coordSystem.scaleAtClientPoint(mouseZoomFactor * e.deltaY, clientPointFromEvent(e));\n    }\n\n    return _this2;\n  });\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return new DisabledState();\n    } else if (e.ctrlKey && canvasDraw.props.enablePanAndZoom) {\n      return new PanState().handleDrawStart(e, canvasDraw);\n    } else {\n      return new WaitForPinchState().handleDrawStart(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return new DisabledState();\n    } else {\n      var _viewPointFromEvent = viewPointFromEvent(canvasDraw.coordSystem, e),\n          x = _viewPointFromEvent.x,\n          y = _viewPointFromEvent.y;\n\n      canvasDraw.lazy.update({\n        x: x,\n        y: y\n      });\n      return _this2;\n    }\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    return canvasDraw.props.disabled ? new DisabledState() : _this2;\n  });\n};\n\nexports.DefaultState = DefaultState;\n;\n/**\n * This state is used as long as the disabled prop is active. It ignores all\n * events and doesn't prevent default actions. The disabled state can only be\n * triggered from the default state (i.e., while no action is actively being\n * performed).\n */\n\nvar DisabledState = function DisabledState() {\n  var _this3 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleMouseWheel(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawStart(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawMove(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawEnd(e, canvasDraw);\n    }\n  });\n};\n/**\n * This state is active as long as the user is panning the image. This state is\n * retained until the pan ceases.\n */\n\n\nexports.DisabledState = DisabledState;\n\nvar PanState = function PanState() {\n  var _this4 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n    _this4.dragStart = clientPointFromEvent(e);\n    _this4.panStart = {\n      x: canvasDraw.coordSystem.x,\n      y: canvasDraw.coordSystem.y\n    };\n    return _this4;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    var _clientPointFromEvent = clientPointFromEvent(e),\n        clientX = _clientPointFromEvent.clientX,\n        clientY = _clientPointFromEvent.clientY;\n\n    var dx = clientX - _this4.dragStart.clientX;\n    var dy = clientY - _this4.dragStart.clientY;\n    canvasDraw.coordSystem.setView({\n      x: _this4.panStart.x + dx,\n      y: _this4.panStart.y + dy\n    });\n    return _this4;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n};\n/**\n * This state is active when the user has initiated the drawing action but has\n * not yet created any lines. We use this state to try and detect a second touch\n * event to initiate a pinch-zoom action. We'll give up on that if enough time\n * or movement happens without a second touch.\n */\n\n\nexports.PanState = PanState;\n\nvar WaitForPinchState = function WaitForPinchState() {\n  var _this5 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    var enablePanAndZoom = canvasDraw.props.enablePanAndZoom;\n    e.preventDefault(); // We're going to transition immediately into lazy-drawing mode if\n    // pan-and-zoom isn't enabled or if this event wasn't triggered by a touch.\n\n    if (!e.touches || !e.touches.length || !enablePanAndZoom) {\n      return new DrawingState().handleDrawStart(e, canvasDraw);\n    } // If we already have two touch events, we can move straight into pinch/pan\n\n\n    if (enablePanAndZoom && e.touches && e.touches.length >= 2) {\n      return new ScaleOrPanState().handleDrawStart(e, canvasDraw);\n    }\n\n    return _this5.handleDrawMove(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault(); // If we have two touches, move to pinch/pan (we don't have to recheck\n    // whether zoom is enabled because that happend in draw start).\n\n    if (e.touches && e.touches.length >= 2) {\n      // Use the start draw to handler to transition.\n      return new ScaleOrPanState().handleDrawStart(e, canvasDraw);\n    }\n\n    var clientPt = clientPointFromEvent(e);\n\n    _this5.deferredPoints.push(clientPt); // If we've already moved far enough, or if enough time has passed, give up\n    // and switch over to drawing.\n\n\n    if (new Date().valueOf() - _this5.startTimestamp < PINCH_TIMEOUT_MS) {\n      if (_this5.startClientPoint === null) {\n        _this5.startClientPoint = clientPt;\n      } // Note that we're using \"manhattan distance\" rather than computing a\n      // hypotenuse here as a cheap approximation\n\n\n      var d = Math.abs(clientPt.clientX - _this5.startClientPoint.clientX) + Math.abs(clientPt.clientY - _this5.startClientPoint.clientY);\n\n      if (d < TOUCH_SLOP) {\n        // We're not ready to give up yet.\n        return _this5;\n      }\n    } // Okay, give up and start drawing.\n\n\n    return _this5.issueDeferredPoints(canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    // The user stopped drawing before we decided what to do. Just treat this as\n    // if they were drawing all along.\n    return _this5.issueDeferredPoints(canvasDraw).handleDrawEnd(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"issueDeferredPoints\", function (canvasDraw) {\n    // Time to give up. Play our deferred points out to the drawing state.\n    // The first point will have been a start draw.\n    var nextState = new DrawingState();\n\n    for (var i = 0; i < _this5.deferredPoints.length; i++) {\n      var deferredPt = _this5.deferredPoints[i];\n      var syntheticEvt = new SyntheticEvent(deferredPt);\n      var func = i === 0 ? nextState.handleDrawStart : nextState.handleDrawMove;\n      nextState = func(syntheticEvt, canvasDraw);\n    }\n\n    return nextState;\n  });\n\n  this.startClientPoint = null;\n  this.startTimestamp = new Date().valueOf();\n  this.deferredPoints = [];\n};\n/**\n * This state is active when the user has added at least two touch points but we\n * don't yet know if they intend to pan or zoom.\n */\n\n\nexports.WaitForPinchState = WaitForPinchState;\n\nvar ScaleOrPanState = function ScaleOrPanState() {\n  var _this6 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    _this6.start = _this6.getTouchMetrics(e);\n    _this6.panStart = {\n      x: canvasDraw.coordSystem.x,\n      y: canvasDraw.coordSystem.y\n    };\n    _this6.scaleStart = canvasDraw.coordSystem.scale;\n    return _this6;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var _this6$recentMetrics = _this6.recentMetrics = _this6.getTouchMetrics(e),\n        centroid = _this6$recentMetrics.centroid,\n        distance = _this6$recentMetrics.distance; // Switch to scaling?\n\n\n    var dd = Math.abs(distance - _this6.start.distance);\n\n    if (dd >= TOUCH_SLOP) {\n      return new TouchScaleState(_this6).handleDrawMove(e, canvasDraw);\n    } // Switch to panning?\n\n\n    var dx = centroid.clientX - _this6.start.centroid.clientX;\n    var dy = centroid.clientY - _this6.start.centroid.clientY;\n    var dc = Math.abs(dx) + Math.abs(dy);\n\n    if (dc >= TOUCH_SLOP) {\n      return new TouchPanState(_this6).handleDrawMove(e, canvasDraw);\n    } // Not enough movement yet\n\n\n    return _this6;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  _defineProperty(this, \"getTouchMetrics\", function (e) {\n    var _clientPointFromEvent2 = clientPointFromEvent(e.touches[0]),\n        t1x = _clientPointFromEvent2.clientX,\n        t1y = _clientPointFromEvent2.clientY;\n\n    var _clientPointFromEvent3 = clientPointFromEvent(e.touches[1]),\n        t2x = _clientPointFromEvent3.clientX,\n        t2y = _clientPointFromEvent3.clientY;\n\n    var dx = t2x - t1x;\n    var dy = t2y - t1y;\n    return {\n      t1: {\n        clientX: t1x,\n        clientY: t1y\n      },\n      t2: {\n        clientX: t2x,\n        clientY: t2y\n      },\n      distance: Math.sqrt(dx * dx + dy * dy),\n      centroid: {\n        clientX: (t1x + t2x) / 2.0,\n        clientY: (t1y + t2y) / 2.0\n      }\n    };\n  });\n};\n/**\n * The user is actively using touch gestures to pan the image.\n */\n\n\nexports.ScaleOrPanState = ScaleOrPanState;\n\nvar TouchPanState = function TouchPanState(scaleOrPanState) {\n  var _this7 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function () {\n    return _this7;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var ref = _this7.scaleOrPanState;\n\n    var _ref$recentMetrics = ref.recentMetrics = ref.getTouchMetrics(e),\n        centroid = _ref$recentMetrics.centroid,\n        distance = _ref$recentMetrics.distance;\n\n    var dx = centroid.clientX - ref.start.centroid.clientX;\n    var dy = centroid.clientY - ref.start.centroid.clientY;\n    canvasDraw.setView({\n      x: ref.panStart.x + dx,\n      y: ref.panStart.y + dy\n    });\n    return _this7;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  this.scaleOrPanState = scaleOrPanState;\n};\n/**\n * The user is actively using touch gestures to scale the drawing.\n */\n\n\nexports.TouchPanState = TouchPanState;\n\nvar TouchScaleState = function TouchScaleState(scaleOrPanState) {\n  var _this8 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function () {\n    return _this8;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var ref = _this8.scaleOrPanState;\n\n    var _ref$recentMetrics2 = ref.recentMetrics = ref.getTouchMetrics(e),\n        centroid = _ref$recentMetrics2.centroid,\n        distance = _ref$recentMetrics2.distance;\n\n    var targetScale = ref.scaleStart * (distance / ref.start.distance);\n    var dScale = targetScale - canvasDraw.coordSystem.scale;\n    canvasDraw.coordSystem.scaleAtClientPoint(dScale, centroid);\n    return _this8;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  this.scaleOrPanState = scaleOrPanState;\n};\n/**\n * This state is active when the user is drawing.\n */\n\n\nexports.TouchScaleState = TouchScaleState;\n\nvar DrawingState = function DrawingState() {\n  var _this9 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (e.touches && e.touches.length) {\n      // on touch, set catenary position to touch pos\n      var _viewPointFromEvent2 = viewPointFromEvent(canvasDraw.coordSystem, e),\n          x = _viewPointFromEvent2.x,\n          y = _viewPointFromEvent2.y;\n\n      canvasDraw.lazy.update({\n        x: x,\n        y: y\n      }, {\n        both: true\n      });\n    }\n\n    return _this9.handleDrawMove(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    var _viewPointFromEvent3 = viewPointFromEvent(canvasDraw.coordSystem, e),\n        x = _viewPointFromEvent3.x,\n        y = _viewPointFromEvent3.y;\n\n    canvasDraw.lazy.update({\n      x: x,\n      y: y\n    });\n    var isDisabled = !canvasDraw.lazy.isEnabled();\n\n    if (!_this9.isDrawing || isDisabled) {\n      // Start drawing and add point\n      canvasDraw.points.push(canvasDraw.clampPointToDocument(canvasDraw.lazy.brush.toObject()));\n      _this9.isDrawing = true;\n    } // Add new point\n\n\n    canvasDraw.points.push(canvasDraw.clampPointToDocument(canvasDraw.lazy.brush.toObject())); // Draw current points\n\n    canvasDraw.drawPoints({\n      points: canvasDraw.points,\n      brushColor: canvasDraw.props.brushColor,\n      brushRadius: canvasDraw.props.brushRadius\n    });\n    return _this9;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    e.preventDefault(); // Draw to this end pos\n\n    _this9.handleDrawMove(e, canvasDraw);\n\n    canvasDraw.saveLine();\n    return new DefaultState();\n  });\n\n  this.isDrawing = false;\n};\n\nexports.DrawingState = DrawingState;\n\nvar SyntheticEvent = function SyntheticEvent(_ref) {\n  var clientX = _ref.clientX,\n      clientY = _ref.clientY;\n\n  _defineProperty(this, \"preventDefault\", function () {});\n\n  this.clientX = clientX;\n  this.clientY = clientY;\n  this.touches = [{\n    clientX: clientX,\n    clientY: clientY\n  }];\n};\n\nexports.SyntheticEvent = SyntheticEvent;\n\nfunction clientPointFromEvent(e) {\n  // use cursor pos as default\n  var clientX = e.clientX;\n  var clientY = e.clientY; // use first touch if available\n\n  if (e.changedTouches && e.changedTouches.length > 0) {\n    clientX = e.changedTouches[0].clientX;\n    clientY = e.changedTouches[0].clientY;\n  }\n\n  return {\n    clientX: clientX,\n    clientY: clientY\n  };\n}\n\nfunction viewPointFromEvent(coordSystem, e) {\n  return coordSystem.clientPointToViewPoint(clientPointFromEvent(e));\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}